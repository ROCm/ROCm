parameters:
- name: checkoutRepo
  type: string
  default: 'self'
- name: checkoutRef
  type: string
  default: ''
- name: rocmDependencies
  type: object
  default:
    - ROCR-Runtime
    - rocprofiler-register
- name: rocmTestDependencies
  type: object
  default:
    - ROCR-Runtime
    - rocprofiler-register

jobs:
- job: rocminfo
  variables:
  - group: common
  - template: /.azuredevops/variables-global.yml
  pool:
    vmImage: ${{ variables.BASE_BUILD_POOL }}
  workspace:
    clean: all
  steps:
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/preamble.yml
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/checkout.yml
    parameters:
      checkoutRepo: ${{ parameters.checkoutRepo }}
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/dependencies-rocm.yml
    parameters:
      dependencyList: ${{ parameters.rocmDependencies }}
      skipLlvmSymlink: true
      # CI case: download latest default branch build
      ${{ if eq(parameters.checkoutRef, 'amd-staging') }}:
        dependencySource: staging
      # manual build case: triggered by ROCm/ROCm repo
      ${{ elseif ne(parameters.checkoutRef, 'amd-staging') }}:
        dependencySource: tag-builds
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/build-cmake.yml
    parameters:
      extraBuildFlags: >-
        -DCMAKE_PREFIX_PATH=$(Agent.BuildDirectory)/rocm
        -DROCRTST_BLD_TYPE=release
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/artifact-upload.yml

- job: rocminfo_testing
  dependsOn: rocminfo
  condition: and(succeeded(), eq(variables.ENABLE_GFX942_TESTS, 'true'))
  variables:
  - group: common
  - template: /.azuredevops/variables-global.yml
  pool: $(JOB_TEST_POOL)
  workspace:
    clean: all
  strategy:
    matrix:
      gfx942:
        JOB_GPU_TARGET: gfx942
        JOB_TEST_POOL: ${{ variables.GFX942_TEST_POOL }}
  steps:
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/preamble.yml
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/local-artifact-download.yml
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/dependencies-rocm.yml
    parameters:
      dependencyList: ${{ parameters.rocmTestDependencies }}
      gpuTarget: $(JOB_GPU_TARGET)
      ${{ if eq(parameters.checkoutRef, 'amd-staging') }}:
        dependencySource: staging
      ${{ elseif ne(parameters.checkoutRef, 'amd-staging') }}:
        dependencySource: tag-builds
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/test.yml
    parameters:
      componentName: rocminfo
      testDir: '$(Agent.BuildDirectory)'
      testExecutable: './rocm/bin/rocminfo'
      testParameters: ''
      testCustomParser: |
        test_name="rocminfo"
        output_file="test_output.xml"
        status=$?
        if [ $status -eq 0 ]; then
            result="<testsuite name=\"$test_name\" tests=\"1\" failures=\"0\" errors=\"0\" skipped=\"0\">
            <testcase classname=\"$test_name\" name=\"$test_name\"/>
        </testsuite>"
        else
            result="<testsuite name=\"$test_name\" tests=\"1\" failures=\"1\" errors=\"0\" skipped=\"0\">
            <testcase classname=\"$test_name\" name=\"$test_name\">
                <failure message=\"Command failed with status $status\"/>
            </testcase>
        </testsuite>"
        fi
        echo "$result" > "$output_file"
        echo "Test results written to $output_file"
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/test.yml
    parameters:
      componentName: rocm_agent_enumerator
      testDir: '$(Agent.BuildDirectory)'
      testExecutable: './rocm/bin/rocm_agent_enumerator | tee test_output'
      testParameters: ''
      testCustomParser: |
        test_name="rocm_agent_enumerator"
        output_file="test_output.xml"
        expected_output="gfx942
        gfx942
        gfx942
        gfx942
        gfx942
        gfx942
        gfx942
        gfx942"
        if [ "$(cat test_output)" == "$expected_output" ]; then
            result="<testsuite name=\"$test_name\" tests=\"1\" failures=\"0\" errors=\"0\" skipped=\"0\">
            <testcase classname=\"$test_name\" name=\"$test_name\"/>
        </testsuite>"
        else
            result="<testsuite name=\"$test_name\" tests=\"1\" failures=\"1\" errors=\"0\" skipped=\"0\">
            <testcase classname=\"$test_name\" name=\"$test_name\">
                <failure message=\"Output did not match expected result (8x gfx942)\"/>
            </testcase>
        </testsuite>"
        fi
        echo "$result" > "$output_file"
        echo "Test results written to $output_file"
