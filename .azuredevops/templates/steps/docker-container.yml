parameters:
# this base set of packages should not be changed by calling script
# should be common across all pipelines
- name: baseAptPackages
  type: object
  default:
    - build-essential
    - ca-certificates
    - cmake
    - curl
    - file
    - git
    - gcc
    - g++
    - gpg
    - kmod
    - libdrm-dev
    - libelf-dev
    - libgtest-dev
    - libhsakmt-dev
    - libhwloc-dev
    - libnuma-dev
    - libstdc++-12-dev
    - libtbb-dev
    - lsb-release
    - lsof
    - ninja-build
    - pkg-config
    - python3-dev
    - python3-pip
    - wget
    - zip
# set to true if llvm-project is not downloaded in a particular call
# or if you just don't want the symlink
- name: skipLlvmSymlink
  type: boolean
  default: false
- name: aptPackages
  type: object
  default: []
- name: pipModules
  type: object
  default: []
- name: dockerVersion
  type: string
  default: '27.5.0'
# test environment involves gpu-related steps
- name: environment
  type: string
  default: build
  values:
    - build
    - test
- name: registerROCmPackages
  type: boolean
  default: false
- name: ROCmKeyringVersion
  type: string
  default: 6.3.1

steps:
# dynamically write to a Dockerfile
# first is to do base setup of users, groups, and expected apt packages
# then, it is to install job-specific aptPackages and pipModules, if necessary
# then, create a custom workspace directory in the container to copy artifacts and sources to
# then, copy the installed rocm libraries and contents of source directory
# then, create symbolic links for compilers
# then, run ldconfig steps to link the shared libraries
# finally, print out contents of the generated dockerfile
  - task: Bash@3
    displayName: Create start of Dockerfile
    inputs:
      workingDirectory: $(Pipeline.Workspace)
      targetType: inline
      script: |
        echo "FROM ubuntu:22.04" > Dockerfile
        echo "ARG USERNAME=user" >> Dockerfile
        echo "ARG USER_UID=1000" >> Dockerfile
        echo "ARG USER_GID=\$USER_UID" >> Dockerfile
        echo "ARG RENDER_GID" >> Dockerfile
        echo "ARG AZ_AGENT_VERSION" >> Dockerfile
        echo "ARG AZ_AGENT_POOL" >> Dockerfile
        echo "ARG AZ_AGENT_ID" >> Dockerfile
        echo "RUN groupadd --gid \$USER_GID \$USERNAME" >> Dockerfile
        echo "RUN useradd --uid \$USER_UID --gid \$USER_GID -m \$USERNAME" >> Dockerfile
        echo "RUN apt-get update" >> Dockerfile
        echo "RUN apt-get install -y sudo" >> Dockerfile
        echo "RUN echo \$USERNAME ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/\$USERNAME" >> Dockerfile
        echo "RUN chmod 0440 /etc/sudoers.d/\$USERNAME" >> Dockerfile
  - ${{ if eq(parameters.environment, 'test') }}:
    - task: Bash@3
      displayName: GPU setup of Dockerfile
      inputs:
        workingDirectory: $(Pipeline.Workspace)
        targetType: inline
        script: |
          echo "RUN groupadd -g \$RENDER_GID render" >> Dockerfile
          echo "RUN usermod -aG render,video \$USERNAME" >> Dockerfile
          echo "COPY pci.ids /usr/share/misc/pci.ids" >> Dockerfile
  - ${{ if gt(length(parameters.baseAptPackages), 0) }}:
    - task: Bash@3
      displayName: Base Apt Packages to Dockerfile
      inputs:
        workingDirectory: $(Pipeline.Workspace)
        targetType: inline
        script: echo "RUN apt-get install --yes ${{ join(' ', parameters.baseAptPackages) }}" >> Dockerfile
  - ${{ if eq(parameters.registerROCmPackages, true) }}:
    - task: Bash@3
      displayName: Register ROCm packages to Dockerfile
      inputs:
        workingDirectory: $(Pipeline.Workspace)
        targetType: inline
        script: |
          echo "RUN mkdir --parents --mode=0755 /etc/apt/keyrings" >> Dockerfile
          echo "RUN wget https://repo.radeon.com/rocm/rocm.gpg.key -O - | gpg --dearmor | tee /etc/apt/keyrings/rocm.gpg > /dev/null" >> Dockerfile
          echo "RUN echo \"deb [arch=amd64 signed-by=/etc/apt/keyrings/rocm.gpg] https://repo.radeon.com/amdgpu/${{ parameters.ROCmKeyringVersion }}/ubuntu jammy main\" | tee /etc/apt/sources.list.d/amdgpu.list" >> Dockerfile
          echo "RUN echo \"deb [arch=amd64 signed-by=/etc/apt/keyrings/rocm.gpg] https://repo.radeon.com/rocm/apt/${{ parameters.ROCmKeyringVersion }} jammy main\" | tee --append /etc/apt/sources.list.d/rocm.list" >> Dockerfile
          echo "RUN printf 'Package: *\\nPin: release o=repo.radeon.com\\nPin-Priority: 600' > /etc/apt/preferences.d/rocm-pin-600" >> Dockerfile
          echo "RUN apt-get update" >> Dockerfile
  - ${{ if gt(length(parameters.aptPackages), 0) }}:
    - task: Bash@3
      displayName: Extra Apt Packages to Dockerfile
      inputs:
        workingDirectory: $(Pipeline.Workspace)
        targetType: inline
        script: echo "RUN apt-get install --yes ${{ join(' ', parameters.aptPackages) }}" >> Dockerfile
  - ${{ if gt(length(parameters.pipModules), 0) }}:
    - task: Bash@3
      displayName: Extra Python Modules to Dockerfile
      inputs:
        workingDirectory: $(Pipeline.Workspace)
        targetType: inline
        script: echo "pip install -v ${{ join(' ', parameters.pipModules) }}" >> Dockerfile
  - task: Bash@3
    displayName: Workspace setup of Dockerfile
    inputs:
      workingDirectory: $(Pipeline.Workspace)
      targetType: inline
      script: |
        echo "RUN apt-get clean" >> Dockerfile
        echo "RUN rm -rf /var/lib/apt/lists/" >> Dockerfile
        echo "USER \$USERNAME" >> Dockerfile
        echo "WORKDIR /home/user" >> Dockerfile
        echo "RUN mkdir -p /home/user/workspace" >> Dockerfile
  - task: Bash@3
    displayName: Copy files to Dockerfile
    inputs:
      workingDirectory: $(Pipeline.Workspace)
      targetType: inline
      script: |
        if [ -d "$(Agent.BuildDirectory)/rocm" ]; then
          echo "COPY rocm /home/user/workspace/rocm" >> Dockerfile
        fi
        if [ -d "$(Build.SourcesDirectory)" ] && [ "$(Build.SourcesDirectory)" != "" ]; then
          echo "COPY s /home/user/workspace/src" >> Dockerfile
        fi
  # Set link to redirect llvm folder
  - ${{ if eq(parameters.skipLlvmSymlink, false) }}:
    - task: Bash@3
      displayName: Symlink from rocm/llvm to rocm/lib/llvm to Dockerfile
      inputs:
        workingDirectory: $(Pipeline.Workspace)
        targetType: inline
        script: |
          echo "RUN ln -s /home/user/workspace/rocm/llvm /home/user/workspace/rocm/lib/llvm" >> Dockerfile
          echo "RUN for file in amdclang amdclang++ amdclang-cl amdclang-cpp amdflang amdlld aompcc mygpu mycpu offload-arch; do" >> Dockerfile
          echo "RUN ln -s /home/user/workspace/rocm/llvm/bin/\$file /home/user/workspace/rocm/bin/\$file; done" >> Dockerfile
  - task: Bash@3
    displayName: ldconfig to Dockerfile
    inputs:
      workingDirectory: $(Pipeline.Workspace)
      targetType: inline
      script: |
        echo "RUN echo /home/user/workspace/rocm/lib | tee /etc/ld.so.conf.d/rocm-ci.conf" >> Dockerfile
        echo "RUN echo /home/user/workspace/rocm/llvm/lib | tee -a /etc/ld.so.conf.d/rocm-ci.conf" >> Dockerfile
        echo "RUN cat /etc/ld.so.conf.d/rocm-ci.conf" >> Dockerfile
        echo "RUN ldconfig -v" >> Dockerfile
        cat Dockerfile
  - script: df -h
    displayName: Disk space before build
  - task: Docker@2
    inputs:
      containerRegistry: 'ContainerService'
      repository: 'rocmexternalcicd.azurecr.io/$(Build.DefinitionName)'
      Dockerfile: '$(Pipeline.Workspace)/Dockerfile'
      buildContext: '$(Pipeline.Workspace)'
