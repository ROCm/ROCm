parameters:
# optional string to specify gpuTarget for the docker image string
- name: gpuTarget
  type: string
  default: ''
# test environment involves gpu-related steps
# some jobs combine both build and test
# some jobs differentiate based on gpu vendor
- name: environment
  type: string
  default: build
  values:
    - build
    - test
    - combined
    - amd
    - nvidia
# optional string to add to PATH
- name: extraPaths
  type: string
  default: ''
# force the docker to be created, regardless of failure condition
- name: forceDockerCreation
  type: boolean
  default: false

steps:
  - task: Bash@3
    condition: or(and(failed(), not(contains(variables['DOCKER_SKIP_GFX'], variables['JOB_GPU_TARGET']))), ${{ eq(parameters.forceDockerCreation, true) }})
    inputs:
      workingDirectory: $(Pipeline.Workspace)
      targetType: inline
      script: |
        docker commit $(hostname) az-ci-temp-image:latest
        echo "FROM az-ci-temp-image:latest" > Dockerfile
        echo "RUN sudo groupmod -g $(getent group render | awk -F: '{print $3}') render" >> Dockerfile
        echo "RUN sudo groupmod -g $(getent group docker | awk -F: '{print $3}') docker" >> Dockerfile
        echo "ENV PATH='$PATH:${{ parameters.extraPaths }}'" >> Dockerfile
        echo "ENTRYPOINT [\"/bin/bash\"]" >> Dockerfile
        cat Dockerfile
  - task: Docker@2
    condition: or(and(failed(), not(contains(variables['DOCKER_SKIP_GFX'], variables['JOB_GPU_TARGET']))), ${{ eq(parameters.forceDockerCreation, true) }})
    inputs:
      containerRegistry: 'ContainerService'
      ${{ if ne(parameters.gpuTarget, '') }}:
        repository: '$(Build.DefinitionName)-${{ parameters.environment }}-${{ parameters.gpuTarget }}'
      ${{ else }}:
        repository: '$(Build.DefinitionName)-${{ parameters.environment }}'
      Dockerfile: '$(Pipeline.Workspace)/Dockerfile'
      buildContext: '$(Pipeline.Workspace)'
  - task: Bash@3
    condition: or(and(failed(), not(contains(variables['DOCKER_SKIP_GFX'], variables['JOB_GPU_TARGET']))), ${{ eq(parameters.forceDockerCreation, true) }})
    displayName: "!! Docker Image URL !!"
    inputs:
      workingDirectory: $(Pipeline.Workspace)
      targetType: inline
      ${{ if ne(parameters.gpuTarget, '') }}:
        script: echo "rocmexternalcicd.azurecr.io/$(Build.DefinitionName)-${{ parameters.environment }}-${{ parameters.gpuTarget }}:$(Build.BuildId)"
      ${{ else }}:
        script: echo "rocmexternalcicd.azurecr.io/$(Build.DefinitionName)-${{ parameters.environment }}:$(Build.BuildId)"
