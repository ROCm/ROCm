# download and install rocm dependencies through pipeline builds in the project
# REQUIRED
variables:
- group: common
- template: /.azuredevops/variables-global.yml
parameters:
- name: dependencyList
  type: object
  default: []
- name: dependencySource
  type: string
  default: staging
  values:
    - staging
    - tag-builds
    - fixed
- name: extractToMnt
  type: boolean
  default: false
# required values for fixed selection
- name: fixedPipelineIdentifier
  type: string
  default: 0
- name: fixedComponentName
  type: string
  default: ''
# match case of the repo in this object for the left side of the maps
# should not need to replace these parameters
- name: stagingPipelineIdentifiers
  type: object
  default:
    AMDMIGraphX: ${{ variables.AMDMIGRAPHX_PIPELINE_ID }}
    amdsmi: ${{ variables.AMDSMI_PIPELINE_ID }}
    aomp-extras: ${{ variables.AOMP_EXTRAS_PIPELINE_ID }}
    aomp: ${{ variables.AOMP_PIPELINE_ID }}
    clr: ${{ variables.CLR_PIPELINE_ID }}
    composable_kernel: ${{ variables.COMPOSABLE_KERNEL_PIPELINE_ID }}
    half: ${{ variables.HALF_PIPELINE_ID }}
    HIP: ${{ variables.HIP_PIPELINE_ID }}
    hipBLAS: ${{ variables.HIPBLAS_PIPELINE_ID }}
    hipBLASLt: ${{ variables.HIPBLASLT_PIPELINE_ID }}
    hipCUB: ${{ variables.HIPCUB_PIPELINE_ID }}
    hipFFT: ${{ variables.HIPFFT_PIPELINE_ID }}
    hipfort: ${{ variables.HIPFORT_PIPELINE_ID }}
    HIPIFY: ${{ variables.HIPIFY_PIPELINE_ID }}
    hipRAND: ${{ variables.HIPRAND_PIPELINE_ID }}
    hipSOLVER: ${{ variables.HIPSOLVER_PIPELINE_ID }}
    hipSPARSE: ${{ variables.HIPSPARSE_PIPELINE_ID }}
    hipSPARSELt: ${{ variables.HIPSPARSELT_PIPELINE_ID }}
    hipTensor: ${{ variables.HIPTENSOR_PIPELINE_ID }}
    llvm-project: ${{ variables.LLVM_PROJECT_PIPELINE_ID }}
    MIOpen: ${{ variables.MIOpen_PIPELINE_ID }}
    MIVisionX: ${{ variables.MIVISIONX_PIPELINE_ID }}
    rccl: ${{ variables.RCCL_PIPELINE_ID }}
    rdc: ${{ variables.RDC_PIPELINE_ID }}
    rocAL: ${{ variables.ROCAL_PIPELINE_ID }}
    rocALUTION: ${{ variables.ROCALUTION_PIPELINE_ID }}
    rocBLAS: ${{ variables.ROCBLAS_PIPELINE_ID }}
    ROCdbgapi: ${{ variables.ROCDBGAPI_PIPELINE_ID }}
    rocDecode: ${{ variables.ROCDECODE_PIPELINE_ID }}
    rocFFT: ${{ variables.ROCFFT_PIPELINE_ID }}
    ROCgdb: ${{ variables.ROCGDB_PIPELINE_ID }}
    rocm-cmake: ${{ variables.ROCM_CMAKE_PIPELINE_ID }}
    rocm-core: ${{ variables.ROCM_CORE_PIPELINE_ID }}
    rocm-examples: ${{ variables.ROCM_EXAMPLES_PIPELINE_ID }}
    rocminfo: ${{ variables.ROCMINFO_PIPELINE_ID }}
    rocMLIR: ${{ variables.ROCMLIR_PIPELINE_ID }}
    ROCmValidationSuite: ${{ variables.ROCMVALIDATIONSUITE_PIPELINE_ID }}
    rocm_bandwidth_test: ${{ variables.ROCM_BANDWIDTH_TEST_PIPELINE_ID }}
    rocm_smi_lib: ${{ variables.ROCM_SMI_LIB_PIPELINE_ID }}
    rocPRIM: ${{ variables.ROCPRIM_PIPELINE_ID }}
    rocprofiler-register: ${{ variables.ROCPROFILER_REGISTER_PIPELINE_ID }}
    rocprofiler: ${{ variables.ROCPROFILER_PIPELINE_ID }}
    ROCR-Runtime: ${{ variables.ROCR_RUNTIME_PIPELINE_ID }}
    rocRAND: ${{ variables.ROCRAND_PIPELINE_ID }}
    rocr_debug_agent: ${{ variables.ROCR_DEBUG_AGENT_PIPELINE_ID }}
    rocSOLVER: ${{ variables.ROCSOLVER_PIPELINE_ID }}
    rocSPARSE: ${{ variables.ROCSPARSE_PIPELINE_ID }}
    ROCT-Thunk-Interface: ${{ variables.ROCT_THUNK_INTERFACE_PIPELINE_ID }}
    rocThrust: ${{ variables.ROCTHRUST_PIPELINE_ID }}
    roctracer: ${{ variables.ROCTRACER_PIPELINE_ID }}
    rocWMMA: ${{ variables.ROCWMMA_PIPELINE_ID }}
    rpp: ${{ variables.RPP_PIPELINE_ID }}

- name: taggedPipelineIdentifiers
  type: object
  default:
    AMDMIGraphX: ${{ variables.AMDMIGRAPHX_TAGGED_PIPELINE_ID }}
    amdsmi: ${{ variables.AMDSMI_TAGGED_PIPELINE_ID }}
    aomp-extras: ${{ variables.AOMP_EXTRAS_TAGGED_PIPELINE_ID }}
    aomp: ${{ variables.AOMP_TAGGED_PIPELINE_ID }}
    clr: ${{ variables.CLR_TAGGED_PIPELINE_ID }}
    composable_kernel: ${{ variables.COMPOSABLE_KERNEL_TAGGED_PIPELINE_ID }}
    half: ${{ variables.HALF_TAGGED_PIPELINE_ID }}
    HIP: ${{ variables.HIP_TAGGED_PIPELINE_ID }}
    hipBLAS: ${{ variables.HIPBLAS_TAGGED_PIPELINE_ID }}
    hipBLASLt: ${{ variables.HIPBLASLT_TAGGED_PIPELINE_ID }}
    hipCUB: ${{ variables.HIPCUB_TAGGED_PIPELINE_ID }}
    hipFFT: ${{ variables.HIPFFT_TAGGED_PIPELINE_ID }}
    hipfort: ${{ variables.HIPFORT_TAGGED_PIPELINE_ID }}
    HIPIFY: ${{ variables.HIPIFY_TAGGED_PIPELINE_ID }}
    hipRAND: ${{ variables.HIPRAND_TAGGED_PIPELINE_ID }}
    hipSOLVER: ${{ variables.HIPSOLVER_TAGGED_PIPELINE_ID }}
    hipSPARSE: ${{ variables.HIPSPARSE_TAGGED_PIPELINE_ID }}
    hipSPARSELt: ${{ variables.HIPSPARSELT_TAGGED_PIPELINE_ID }}
    hipTensor: ${{ variables.HIPTENSOR_TAGGED_PIPELINE_ID }}
    llvm-project: ${{ variables.LLVM_PROJECT_TAGGED_PIPELINE_ID }}
    MIOpen: ${{ variables.MIOpen_TAGGED_PIPELINE_ID }}
    MIVisionX: ${{ variables.MIVISIONX_TAGGED_PIPELINE_ID }}
    rccl: ${{ variables.RCCL_TAGGED_PIPELINE_ID }}
    rdc: ${{ variables.RDC_TAGGED_PIPELINE_ID }}
    rocAL: ${{ variables.ROCAL_TAGGED_PIPELINE_ID }}
    rocALUTION: ${{ variables.ROCALUTION_TAGGED_PIPELINE_ID }}
    rocBLAS: ${{ variables.ROCBLAS_TAGGED_PIPELINE_ID }}
    ROCdbgapi: ${{ variables.ROCDBGAPI_TAGGED_PIPELINE_ID }}
    rocDecode: ${{ variables.ROCDECODE_TAGGED_PIPELINE_ID }}
    rocFFT: ${{ variables.ROCFFT_TAGGED_PIPELINE_ID }}
    ROCgdb: ${{ variables.ROCGDB_TAGGED_PIPELINE_ID }}
    rocm-cmake: ${{ variables.ROCM_CMAKE_TAGGED_PIPELINE_ID }}
    rocm-core: ${{ variables.ROCM_CORE_TAGGED_PIPELINE_ID }}
    rocm-examples: ${{ variables.ROCM_EXAMPLES_TAGGED_PIPELINE_ID }}
    rocminfo: ${{ variables.ROCMINFO_TAGGED_PIPELINE_ID }}
    rocMLIR: ${{ variables.ROCMLIR_TAGGED_PIPELINE_ID }}
    ROCmValidationSuite: ${{ variables.ROCMVALIDATIONSUITE_TAGGED_PIPELINE_ID }}
    rocm_bandwidth_test: ${{ variables.ROCM_BANDWIDTH_TEST_TAGGED_PIPELINE_ID }}
    rocm_smi_lib: ${{ variables.ROCM_SMI_LIB_TAGGED_PIPELINE_ID }}
    rocPRIM: ${{ variables.ROCPRIM_TAGGED_PIPELINE_ID }}
    rocprofiler-register: ${{ variables.ROCPROFILER_REGISTER_TAGGED_PIPELINE_ID }}
    rocprofiler: ${{ variables.ROCPROFILER_TAGGED_PIPELINE_ID }}
    ROCR-Runtime: ${{ variables.ROCR_RUNTIME_TAGGED_PIPELINE_ID }}
    rocRAND: ${{ variables.ROCRAND_TAGGED_PIPELINE_ID }}
    rocr_debug_agent: ${{ variables.ROCR_DEBUG_AGENT_TAGGED_PIPELINE_ID }}
    rocSOLVER: ${{ variables.ROCSOLVER_TAGGED_PIPELINE_ID }}
    rocSPARSE: ${{ variables.ROCSPARSE_TAGGED_PIPELINE_ID }}
    ROCT-Thunk-Interface: ${{ variables.ROCT_THUNK_INTERFACE_TAGGED_PIPELINE_ID }}
    rocThrust: ${{ variables.ROCTHRUST_TAGGED_PIPELINE_ID }}
    roctracer: ${{ variables.ROCTRACER_TAGGED_PIPELINE_ID }}
    rocWMMA: ${{ variables.ROCWMMA_TAGGED_PIPELINE_ID }}
    rpp: ${{ variables.RPP_TAGGED_PIPELINE_ID }}

  # set to true if you're calling this template file multiple files in same pipeline
# only leave last call false to optimize sequence
- name: skipLibraryLinking
  type: boolean
  default: false

steps:
# assuming artifact-download.yml template file in same directory
- ${{ each dependency in parameters.dependencyList }}:
  - ${{ if eq(parameters.dependencySource, 'staging') }}:
    - template: artifact-download.yml
      parameters:
        componentName: ${{ dependency }}
        pipelineId: ${{ parameters.stagingPipelineIdentifiers[dependency] }}
        extractToMnt: ${{ parameters.extractToMnt }}
  - ${{ if eq(parameters.dependencySource, 'tag-builds') }}:
    - template: artifact-download.yml
      parameters:
        componentName: ${{ dependency }}
        pipelineId: ${{ parameters.taggedPipelineIdentifiers[dependency] }}
        extractToMnt: ${{ parameters.extractToMnt }}
# fixed case only accepts one component at a time, so no array input
- ${{ if eq(parameters.dependencySource, 'fixed') }}:
  - template: artifact-download.yml
    parameters:
      componentName: ${{ parameters.fixedComponentName }}
      pipelineId: ${{ parameters.fixedPipelineIdentifier }}
      extractToMnt: ${{ parameters.extractToMnt }}
- task: Bash@3
  displayName: 'list downloaded ROCm files'
  inputs:
    targetType: inline
    ${{ if eq(parameters.extractToMnt, true) }}:
      script: ls -1R /mnt/rocm
    ${{ else }}:
      script: ls -1R $(Agent.BuildDirectory)/rocm
- ${{ if eq(parameters.skipLibraryLinking, false) }}:
  - task: Bash@3
    displayName: 'link ROCm shared libraries'
    inputs:
      targetType: inline
# OS ignores if the ROCm lib folder shows up more than once
      ${{ if eq(parameters.extractToMnt, true) }}:
        script: |
          echo /mnt/rocm/lib | sudo tee -a /etc/ld.so.conf
          echo /mnt/rocm/llvm/lib | sudo tee -a /etc/ld.so.conf
          sudo cat /etc/ld.so.conf
          sudo ldconfig -v
          ldconfig -p
      ${{ else }}:
        script: |
          echo $(Agent.BuildDirectory)/rocm/lib | sudo tee -a /etc/ld.so.conf
          echo $(Agent.BuildDirectory)/rocm/llvm/lib | sudo tee -a /etc/ld.so.conf
          sudo cat /etc/ld.so.conf
          sudo ldconfig -v
          ldconfig -p
